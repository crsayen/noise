#ifndef _INCL_GUARD
#define _INCL_GUARD
#include "../noiser.h"
#endif
#include <vector>

int chord_intervals[11][3] = {
    {0, 4, 7},
    {0, 4, 7},
    {0, 3, 7},
    {0, 3, 7},
    {0, 3, 7},
    {0, 4, 7},
    {0, 4, 7},
    {0, 4, 7},
    {0, 4, 7},
    {0, 3, 7},
    {0, 5, 8}
};

float note_bounds[108] = {
    16.835,17.835,18.9,20.025,21.215,22.475,23.810000000000002,25.23,
    26.73,28.32,30.005000000000003,31.785000000000004,33.675,35.68,37.8,
    40.045,42.425,44.95,47.625,50.455,53.455,56.635000000000005,60.005,
    63.575,67.35499999999999,71.36,75.6,80.095,84.86,89.905,95.25,
    100.91499999999999,106.91499999999999,113.27000000000001,120.005,
    127.14,134.7,142.71,151.195,160.185,169.71,179.805,190.5,201.825,
    213.825,226.54000000000002,240.01,254.285,269.405,285.42,302.395,
    320.38,339.43,359.61,380.995,403.65,427.65,453.08000000000004,
    480.02,508.565,538.81,570.85,604.79,640.75,678.855,719.225,761.99,
    807.3,855.3050000000001,906.165,960.05,1017.135,1077.615,
    1141.6950000000002,1209.585,1281.51,1357.71,1438.4450000000002,
    1523.98,1614.6,1710.6100000000001,1812.33,1920.095,2034.2649999999999,
    2155.23,2283.3900000000003,2419.17,2563.02,2715.425,2876.895,3047.96,
    3229.2,3421.2200000000003,3624.6549999999997,3840.19,4068.54,4310.465,
    4566.775,4838.33,5126.035,5430.844999999999,5753.78,6095.92,
    6458.405000000001,6842.4400000000005,7249.3099999999995,7680.375,10000.0
};

float chromatic_freqs[108] = {
    16.35,17.32,18.35,19.45,20.6,21.83,23.12,24.5,25.96,27.5,29.14,30.87,32.7,34.65,
    36.71,38.89,41.2,43.65,46.25,49.0,51.91,55.0,58.27,61.74,65.41,69.3,73.42,77.78,
    82.41,87.31,92.5,98.0,103.83,110.0,116.54,123.47,130.81,138.59,146.83,155.56,
    164.81,174.61,185.0,196.0,207.65,220.0,233.08,246.94,261.63,277.18,293.66,311.13,
    329.63,349.23,369.99,392.0,415.3,440.0,466.16,493.88,523.25,554.37,587.33,622.25,
    659.25,698.46,739.99,783.99,830.61,880.0,932.33,987.77,1046.5,1108.73,1174.66,
    1244.51,1318.51,1396.91,1479.98,1567.98,1661.22,1760.0,1864.66,1975.53,2093.0,
    2217.46,2349.32,2489.02,2637.02,2793.83,2959.96,3135.96,3322.44,3520.0,3729.31,
    3951.07,4186.01,4434.92,4698.63,4978.03,5274.04,5587.65,5919.91,6271.93,6644.88,
    7040.0,7458.62,7902.13
};


int get_idx(float freq){
    int root_index = 0;
    for(int i = 0; i < 107; i++){
        if (freq >= note_bounds[i]){
            root_index = i + 1;
        }
        else{
            break;
        }
    }
    return root_index;
}

class Chords : public Voice {
    public:
    std::vector<Saw> saws;
    uint8_t _n_saws;
    Chords(uint8_t n_saws);
    ~Chords();
    void detune(float amount);
    float next(float frequency);
};

Chords::Chords(uint8_t n_saws){
    _n_saws = n_saws;
    for(int i = 0; i < n_saws; i++){
        saws.push_back(Saw());
    }
}

Chords::~Chords() {
    for(auto i : saws){
        delete(&i);
    }
}

float Chords::next(float frequency) {
    float out = 0.0f;
    float root = frequency * 48000;
    int chord[3];
    int idx = get_idx(root);
    if (idx > 99){
        idx = 99;
    }
    int sidx = idx % 11;
    for(int i = 0; i < 3; i++){
        chord[i] = chord_intervals[sidx][i];
    }
    int x = 0;
    for(auto &i : saws){
        out+= i.next(chromatic_freqs[idx + chord[x]] * 2.0833333333e-05);
        x++;
    }
    //Serial.println(idx);
    out/= _n_saws;
    return out;
}